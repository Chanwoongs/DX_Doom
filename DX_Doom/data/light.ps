////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTextures[3];
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
	float ambientToggle;
	float diffuseToggle;
	float specularToggle;
	float padding;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
	float3 viewDirection : TEXCOORD1; // E를 위한 Sementic
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
    float4 specular;

	// multitexture color
	float4 secondTextureColor;
	float4 blendColor;

	// bump mapping
	float4 bumpMap;
    float3 bumpNormal;

	// Get the pixel color from the first texture.
	textureColor = shaderTextures[0].Sample(SampleType, input.tex);

	// Get the pixel color from the second texture.
	secondTextureColor = shaderTextures[1].Sample(SampleType, input.tex);

	// Sample the pixel in the bump map.
    bumpMap = shaderTextures[2].Sample(SampleType, input.tex);
    // Expand the range of the normal value from (0, +1) to (-1, +1).
    bumpMap = (bumpMap * 2.0f) - 1.0f;
	// Calculate the normal from the data in the bump map.
    bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
    // Normalize the resulting bump normal.
    bumpNormal = normalize(bumpNormal);

// Multi Texturing
{
	if(secondTextureColor.r == 1.0f && secondTextureColor.g == 1.0f && secondTextureColor.b == 1.0f)
	{
		// Blend the two pixels together and multiply by the gamma value.
		blendColor = textureColor;
	}
	else
	{
		blendColor = textureColor * secondTextureColor * 1.0f;
	}
	// Saturate the final color.
	blendColor = saturate(blendColor);
}

// Alpha Blending
{
	if(textureColor.r < 0.05f && textureColor.g < 0.05f && textureColor.b < 0.05f)
	{
		textureColor.a = 0.0f;
		color = float4(0.0f, 0.0f, 0.0f, 0.0f);
		color = color * textureColor;
		    
		return color;
	}
}
	
// lighting
{
	// Set the default output color to the ambient light value for all pixels.
	if (ambientToggle == 1.0f)
	{
		color = saturate(blendColor + ambientColor);
	}
	else
	{
		color = float4(0.3f, 0.3f, 0.3f, 1.0f);
	}

	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

	if(bumpMap.r == 1.0f && bumpMap.g == 1.0f && bumpMap.b == 1.0f)
	{
		// Calculate the amount of light on this pixel.
		lightIntensity = saturate(dot(input.normal, lightDir));
	}
	else
	{
		lightIntensity = saturate(dot(bumpNormal, lightDir));
	}


	if(lightIntensity > 0.0f)
    {
		if (diffuseToggle == 1.0f)
		{
		    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
			color += (diffuseColor * lightIntensity);

			// Saturate the ambient and diffuse color.
			color = saturate(color);
		}

		if (specularToggle == 1.0f)
		{
			// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		    reflection = normalize(2 * lightIntensity * input.normal - lightDir); // R 계산

			// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
			specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower); // specular 만드는 공식
		}
	}

    // Multiply the texture pixel and the input color to get the textured result.
    color = color * blendColor;

	// Add the specular component last to the output color.
    color = saturate(color + specular);
}

    return color;
}